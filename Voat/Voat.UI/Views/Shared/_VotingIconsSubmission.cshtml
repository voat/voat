@*This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an "AS IS" basis,
    WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
    the specific language governing rights and limitations under the License.

    All portions of the code written by Voat are Copyright (c) 2014 Voat
    All Rights Reserved.*@

@model Voat.Data.Models.Submission

@{
    int score = (int)(Model.UpCount - Model.DownCount);

    //default voting icons style
    string votingStatusClassUpArrow = "arrow-upvote";
    string votingStatusClassDownArrow = "arrow-downvote";
    string likesOrDislikesClass = "unvoted";

    int commentContributionPoints = Convert.ToInt32(ViewData["CCP"]);

    double likes = Math.Round(((double)Model.UpCount / ((double)Model.UpCount + (double)Model.DownCount)) * 100);
    double dislikes = Math.Round(((double)Model.DownCount / ((double)Model.UpCount + (double)Model.DownCount)) * 100);

    if (User.Identity.IsAuthenticated)
    {
        string loggedInUserName = User.Identity.Name;

        //returns -1:downvoted, 1:upvoted, or 0:not voted
        int votedOrNot = Voting.CheckIfVoted(loggedInUserName, Model.ID);

        switch (votedOrNot)
        {
            case 1:
                votingStatusClassUpArrow = "arrow-upvoted";
                votingStatusClassDownArrow = "arrow-downvote";
                likesOrDislikesClass = "likes";
                break;
            case -1:
                likesOrDislikesClass = "dislikes";
                votingStatusClassUpArrow = "arrow-upvote";
                votingStatusClassDownArrow = "arrow-downvoted";
                break;
        }

        <div class="midcol @likesOrDislikesClass">
            <div class="@votingStatusClassUpArrow login-required" onclick="voteSubmission(@Model.ID, 1);" role="button" aria-label="upvote" tabindex="0"></div>
            <div class="score dislikes">@Model.DownCount</div>
            <div class="score unvoted">@score</div>
            <div class="score likes">@Model.UpCount</div>
            <div class="@votingStatusClassDownArrow login-required" onclick="voteSubmission(@Model.ID, -1);" role="button" aria-label="downvote" tabindex="0"></div>
        </div>

        <div class="scorebar" title="Blue = upvotes, violet = downvotes">
            <div class="scorebar-likes" style="height: @likes%"></div>
            <div class="scorebar-dislikes" style="height: @dislikes%"></div>
        </div>
    }

    else
    {
        <div class="midcol unvoted">
            <div class="arrow-upvote login-required" onclick="mustLogin();" role="button" aria-label="upvote" tabindex="0" id="upvotebutton-@Model.ID"></div>
            <div class="score dislikes">@Model.DownCount</div>
            <div class="score unvoted">@score</div>
            <div class="score likes">@Model.UpCount</div>
            <div class="arrow-downvote login-required" onclick="mustLogin();" role="button" aria-label="downvote" tabindex="0"></div>
        </div>

        <div class="scorebar" title="Blue = upvotes, violet = downvotes">
            <div class="scorebar-likes" style="height: @likes%"></div>
            <div class="scorebar-dislikes" style="height: @dislikes%"></div>
        </div>
    }
}

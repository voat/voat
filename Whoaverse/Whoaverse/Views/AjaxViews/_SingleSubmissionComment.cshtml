@*This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an "AS IS" basis,
    WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
    the specific language governing rights and limitations under the License.

    All portions of the code written by Voat are Copyright (c) 2014 Voat
    All Rights Reserved.*@

@model Comment

@using Voat.Models;

@{
    int commentContributionPoints = Convert.ToInt32(ViewData["CCP"]);

    // check if thread should be hidden
    bool parentIsHidden = Convert.ToBoolean(ViewData["parentIsHidden"]);
    bool childTohiddenParent = Convert.ToBoolean(ViewData["childTohiddenParent"]);
    bool? subverseAnonymized = Convert.ToBoolean(ViewData["SubverseAnonymized"]);

    DateTime submissionDate = Model.Date;
    string postAge = Submissions.CalcSubmissionAge(submissionDate);
    string opName = Model.Message.Name;
    string commentAuthor = Model.Name;

    string collapsedComment = "";
    string uncollapsedComment = "";
    string showIfParent = "";

    // apply class style if OP is the Comment Author
    opName = opName.Trim();
    commentAuthor = commentAuthor.Trim();

    bool? isRootComment = ViewBag.rootComment;
    bool? showContextLink = ViewBag.ShowContextLink;
        
    string commentType = "";
    if (isRootComment == true)
    {
        commentType = "thread";
    }
    else
    {
        commentType = "child";
    }

    // collapse comments with score of -5 or less
    if (parentIsHidden)
    {
        collapsedComment = ""; //show collapsed comment
        uncollapsedComment = "display:none"; //hide uncollapsed comment
        if (childTohiddenParent)
        {
            showIfParent = "display: none";
            uncollapsedComment = "";
            collapsedComment = "display: none";
        }
    }
    else
    {
        collapsedComment = "display:none"; //hide collapsed comment
        uncollapsedComment = ""; //show uncollapsed comment
    }
}

<div class="@commentType id-@Model.Id comment" data-fullname="" data-ups="" data-downs="" style="">
    @* 1 submission comment *@
    <p class="parent">
        <a></a>
    </p>

    @if (Model.Name != "deleted")
    {
        @Html.Partial("_votingIconsComment", Model, new ViewDataDictionary { { "CommentId", Model.Id }, { "CCP", commentContributionPoints }, { "collapsedStyle", uncollapsedComment } })
    }

    <div class="entry unvoted">
        <div class="collapsed" style='@collapsedComment'>
            <a href="#" class="expand" onclick="return showcomment(@Model.Id)">[+]</a>
            @if (Model.Name != "deleted")
            {
                int commentScore = Model.Likes - Model.Dislikes;

                if (Model.Anonymized || subverseAnonymized == true)
                {
                    <a href="#" class="author gray may-blank">@Model.Id</a>
                }
                else
                {
                    <a href="/user/@Model.Name" class="author gray may-blank">@Model.Name</a>
                }

                <span class="userattrs"></span>
                <span class="score dislikes">@Model.Dislikes points</span>
                <span class="score onlycollapsed">@commentScore points</span>
                <span class="score likes">@Model.Likes points</span>
            }
            else
            {
                <span class="userattrs">[deleted]</span>
            }
            <time title="@Model.Date" datetime="@Model.Date">@postAge</time>&#32;ago &nbsp;<a href="#" class="expand" style="@showIfParent" onclick="return showcomment(@Model.Id)">(show children)</a>
        </div>

        <div class="noncollapsed" id="@Model.Id" style="@uncollapsedComment">
            <p class="tagline">
                <a href="#" class="expand" onclick="return hidecomment(@Model.Id)">[&ndash;]</a>

                @if (Model.Name != "deleted")
                {
                    int commentScore = Model.Likes - Model.Dislikes;

                    if (opName == commentAuthor)
                    {
                        if (Model.IsDistinguished)
                        {
                            @Html.Partial("~/Views/Shared/UserDistinctions/_SubmitterModeratorDistinction.cshtml", Model)
                        }
                        else
                        {
                            @Html.Partial("~/Views/Shared/UserDistinctions/_SubmitterDistinction.cshtml", Model)
                        }
                    }
                    else if (Model.IsDistinguished)
                    {
                        @Html.Partial("~/Views/Shared/UserDistinctions/_ModeratorDistinction.cshtml", Model)
                    }
                    else
                    {
                        @Html.Partial("~/Views/Shared/UserDistinctions/_UserDistinction.cshtml", Model)
                    }

                    <span class="score dislikes">@Model.Dislikes points</span>
                    <span class="score unvoted">@commentScore points</span>
                    <span class="score likes">@Model.Likes points</span>
                    <span class="commentvotesratio">(<span class="post_upvotes">+@Model.Likes</span>|<span class="post_downvotes">-@Model.Dislikes</span>)</span>
                }
                else
                {
                    <span class="userattrs">[deleted]</span>
                }

                <time title="@Model.Date" datetime="@Model.Date">@postAge</time>&#32;ago
            </p>

            <form class="usertext" onsubmit="return editcommentsubmit(@Model.Id)" id="commenteditform-@Model.Id" action="#">
                @Html.AntiForgeryToken()
                <input id="CommentId" name="CommentId" value="@Model.Id" type="hidden">

                @if (Model.Name != "deleted")
                {
                    <div class="usertext-body may-blank-within" id="commentContent-@Model.Id">
                        <div class="md">
                            @* Skip Regex intense processing if we've pre-processed *@
                            @if (!String.IsNullOrEmpty(Model.FormattedContent))
                            {
                                @Html.Raw(Model.FormattedContent)
                            }
                            else
                            {
                                @Html.Raw(@Formatting.FormatMessage(Model.CommentContent))
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="usertext gray">
                        <div class="md">
                            [@Model.CommentContent]
                        </div>
                    </div>
                }

                <div class="usertext-edit" style="width: 775px; display: none;">
                    <div>
                        @Html.Partial("_MarkdownEditor")
                        <textarea aria-invalid="false" class="form-control valid" cols="20" id="CommentContent" name="CommentContent" rows="2" data-rule-required="true" data-msg-required="The comment can not be empty.">@WebUtility.HtmlDecode(Model.CommentContent)</textarea>
                        <span data-valmsg-replace="false" data-valmsg-for="CommentContent" class="field-validation-error"></span>
                        <div class="usertext-buttons">
                            <input value="Save" class="btn-whoaverse-paging" type="submit">
                            <input type="button" id="previewButton" value="Preview" class="btn-whoaverse-paging" onclick="showMessagePreview(this,$(this.parentElement.parentElement).find('#CommentContent'),$(this.parentElement.parentElement).find('#submission-preview-area'))">
                            <button class="btn-whoaverse-paging" onclick="removeeditform(@Model.Id)" type="button">Cancel</button>
                        </div>
                        <div class="panel panel-default" id="submission-preview-area" style="display: none">
                            <div class="panel-heading">
                                <h4 class="panel-title">Preview</h4>
                            </div>
                            <div class="panel-body">
                                <div class="usertext-body may-blank-within">
                                    <div class="md" id="submission-preview-area-container">
                                        Loading preview...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </form>
            <ul class="flat-list buttons">
                @if (Model.Name != "deleted" && showContextLink == true)
                {
                <li>
                    <a href="/v/@Model.Message.Subverse/comments/@Model.MessageId/@Model.ParentId/@Model.Id#@Model.Id" rel="nofollow">context</a>
                </li>
                }
                @if (Model.Name != "deleted")
                {
                    <li class="first">
                        <a href="/v/@Model.Message.Subverse/comments/@Model.MessageId/@Model.Id" class="bylink" rel="nofollow">permalink</a>
                    </li>
                }

                @if (User.Identity.IsAuthenticated && commentAuthor != "deleted")
                {
                    //returns true if user has saved this post
                    var savedOrNot = SavingComments.CheckIfSavedComment(User.Identity.Name, @Model.Id);
                    var saveString = savedOrNot == true ? "unsave" : "save";
                    <li>
                        <a class="savelink" href="javascript:void(0)" onclick="return toggleSaveComment(@Model.Id);">@saveString</a>
                    </li>
                    // if user is sub admin or sub mod but not comment author, show delete button
                    if (User.Identity.Name != commentAuthor)
                    {
                        if (Voat.Utils.User.IsUserSubverseAdmin(User.Identity.Name, Model.Message.Subverse) || Voat.Utils.User.IsUserSubverseModerator(User.Identity.Name, Model.Message.Subverse))
                        {
                            <li>
                                <form class="toggle del-button " action="#" method="get">
                                    <input class="active" name="executed" value="deleted" type="hidden">
                                    <span class="option main active">
                                        <a href="javascript:void(0)" class="togglebutton" onclick="return toggle(this, @Model.Id)">delete</a>
                                    </span>
                                    <span class="option error">
                                        are you sure?  <a href="javascript:void(0)" class="yes" onclick="deletecomment(@Model.Id)">yes</a> / <a href="javascript:void(0)" class="no" onclick="return toggleback(this)">no</a>
                                    </span>
                                </form>
                            </li>
                        }
                    }

                    // if user is comment author, show edit and delete buttons. additionally, if he is sub admin or mod, show distinguish button
                    if (User.Identity.Name == commentAuthor)
                    {
						if (Voat.Utils.User.IsUserSubverseAdmin(User.Identity.Name, Model.Message.Subverse) || Voat.Utils.User.IsUserSubverseModerator(User.Identity.Name, Model.Message.Subverse))
                        {
                            <li>
                                <a class="" href="javascript:void(0)" onclick="return distinguish(@Model.Id, @Model.MessageId)">distinguish</a>
                            </li>
						}
                        <li>
                            <a class="" href="javascript:void(0)" onclick="return edit(@Model.Id, @Model.MessageId)">edit</a>
                        </li>
                        <li>
                            <form class="toggle del-button " action="#" method="get">
                                <input class="active" name="executed" value="deleted" type="hidden">
                                <span class="option main active">
                                    <a href="javascript:void(0)" class="togglebutton" onclick="return toggle(this, @Model.Id)">delete</a>
                                </span>
                                <span class="option error">
                                    are you sure?  <a href="javascript:void(0)" class="yes" onclick="deletecomment(@Model.Id)">yes</a> / <a href="javascript:void(0)" class="no" onclick="return toggleback(this)">no</a>
                                </span>
                            </form>
                        </li>
                    }

                    if (Model.Name != "deleted")
                    {
                        <li>
                            <a class="" href="javascript:void(0)" onclick="return reply(@Model.Id, @Model.MessageId)">reply</a>
                        </li>
                    }
                }
            </ul>
        </div>
    </div>
</div>

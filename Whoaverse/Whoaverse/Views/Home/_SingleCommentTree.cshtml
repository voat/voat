@*This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an "AS IS" basis,
    WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
    the specific language governing rights and limitations under the License.

    All portions of the code written by Voat are Copyright (c) 2014 Voat
    All Rights Reserved.*@

@using Voat.Models
@model Message

@{
    int commentContributionPoints = Convert.ToInt32(ViewData["CCP"]);
    int startingCommentId = Convert.ToInt32(ViewData["StartingCommentId"]);
    string sortingMode = Convert.ToString(ViewData["SortingMode"]);

    IEnumerable<Comment> firstComments;

    if (sortingMode == "new")
    {
        firstComments = from f in Model.Comments
                        let commentScore = f.Likes - f.Dislikes
                        where f.Id == startingCommentId
                        orderby f.Date descending
                        select f;
    }
    else
    {
        firstComments = from f in Model.Comments
                        let commentScore = f.Likes - f.Dislikes
                        where f.Id == startingCommentId
                        orderby commentScore descending
                        select f;
    }
}

@* show top 200 submission comments, orderby number of votes each comment has received *@
<div class='commentarea'>
    <div class="alert-singlethread">
        You are viewing a single comment's thread.
        <p>
            <a href="/v/@Model.Subverse/comments/@Model.Id">view the rest of the comments</a>&nbsp;→
        </p>
    </div>
    <div id="siteTable" class="sitetable nestedlisting">
        @{            
            foreach (var firstComment in firstComments)
            {
                if (firstComment.Likes - firstComment.Dislikes < -3)
                {
                    <div class="thread id-@firstComment.Id comment" data-fullname="" data-ups="" data-downs="">
                        @Html.Partial("~/Views/Shared/Submissions/_SubmissionComment.cshtml", Model, new ViewDataDictionary { { "VoteCache", ViewBag.VoteCache }, { "CommentId", firstComment.Id }, { "CCP", commentContributionPoints }, { "parentIsHidden", true }, { "SortingMode", sortingMode }, { "commentToHighlight", ViewBag.CommentToHighLight } })
                    </div>
                }
                else
                {
                    <div class="thread id-@firstComment.Id comment" data-fullname="" data-ups="" data-downs="">
                        @Html.Partial("~/Views/Shared/Submissions/_SubmissionComment.cshtml", Model, new ViewDataDictionary { { "VoteCache", ViewBag.VoteCache }, { "CommentId", firstComment.Id }, { "CCP", commentContributionPoints }, { "parentIsHidden", false }, { "SortingMode", sortingMode }, { "commentToHighlight", ViewBag.CommentToHighLight } })
                    </div>
                }
            }
        }
    </div>
</div>

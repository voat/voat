@*This source file is subject to version 3 of the GPL license,
    that is bundled with this package in the file LICENSE, and is
    available online at http://www.gnu.org/licenses/gpl.txt;
    you may not use this file except in compliance with the License.

    Software distributed under the License is distributed on an "AS IS" basis,
    WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
    the specific language governing rights and limitations under the License.

    All portions of the code written by Whoaverse are Copyright (c) 2014 Whoaverse
    All Rights Reserved.*@

@using Whoaverse.Utils;

@{
    int commentId = Convert.ToInt32(ViewData["CommentId"]);
    int commentContributionPoints = Convert.ToInt32(ViewData["CCP"]);

    string collapsedStyle = Convert.ToString(ViewData["collapsedStyle"]);

    int score = (Model.Likes - Model.Dislikes);

    //default voting icons style
    string votingStatusClassUpArrow = "arrow-upvote";
    string votingStatusClassDownArrow = "arrow-downvote";
    string likesOrDislikesClass = "unvoted";

    if (User.Identity.IsAuthenticated)
    //LOGGED IN USERS
    {
        string loggedInUserName = User.Identity.Name;
        //returns -1:downvoted, 1:upvoted, or 0:not voted
        int votedOrNot = VotingComments.CheckIfVotedComment(loggedInUserName, commentId);

        switch (votedOrNot)
        {
            case 1:
                votingStatusClassUpArrow = "arrow-upvoted";
                votingStatusClassDownArrow = "arrow-downvote";
                likesOrDislikesClass = "likes";
                break;
            case -1:
                likesOrDislikesClass = "dislikes";
                votingStatusClassUpArrow = "arrow-upvote";
                votingStatusClassDownArrow = "arrow-downvoted";
                break;
        }

        <div class="midcol @likesOrDislikesClass" style="@collapsedStyle">
            @if (commentContributionPoints < 1)
            {
                //notenoughccpupvote
                <div class="@votingStatusClassUpArrow login-required" onclick="notEnoughCCPUpVote();" role="button" aria-label="upvote" tabindex="0"></div>
            }
            else
            {
                <div class="@votingStatusClassUpArrow login-required" onclick="voteUpComment(@commentId);" role="button" aria-label="upvote" tabindex="0"></div>
            }

            

            @if (commentContributionPoints < 100)
            {
                // show tooltip that downvoting is restricted
                <div class="@votingStatusClassDownArrow login-required" onclick="notEnoughCCP();" role="button" aria-label="downvote" tabindex="0"></div>
            }
            else
            {
                <div class="@votingStatusClassDownArrow login-required" onclick="voteDownComment(@commentId);" role="button" aria-label="downvote" tabindex="0"></div>
            }

        </div>
    }
    else
    //GUESTS
    {
        <div class="midcol @likesOrDislikesClass" style="@collapsedStyle">
            <div class="@votingStatusClassUpArrow login-required" onclick="mustLogin();" role="button" aria-label="upvote" tabindex="0"></div>
            <div class="@votingStatusClassDownArrow login-required" onclick="mustLogin();" role="button" aria-label="downvote" tabindex="0"></div>
        </div>
    }
}